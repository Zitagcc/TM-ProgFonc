(require racket/string)

(define (jourCorrect? jour)
  (and (>= jour 1) (<= jour 31)))

(define (moisCorrect? mois)
  (and (>= mois 1) (<= mois 12)))

(define (anneeBissextile? annee)
  (= (remainder annee 4) 0))

; --
(define (days-in-year y)
    (if (anneeBissextile? y) 366 365))

(define (conv mois year)
  (cond ((> mois 1)
         (cond ((member mois '(1 3 5 7 8 10 12)) (+ 31 (conv (- mois 1) year)))
                    ((member mois '(4 6 9 11)) (+ 30 (conv (- mois 1) year)))
                    ((and (= mois 2) (anneeBissextile? year))
                     (+ 29 (conv (- mois 1) year)))
                    (else (+ 28 (conv (- mois 1) year)))))
        (else 31)))

(define (date2NbrJr jour mois annee)
  (cond ((> (- mois 1) 0) (+ jour (conv (- mois 1) annee)))
  (else jour)))

(define (rem n )
  (cond ((< n 0) (+ 7 (remainder n 7)))
        (else (remainder n 7)))) 
         
 ; --
(define (datePaques annee)
  (define n (remainder annee 19))
  (define c (quotient annee 100))
  (define u (remainder annee 100))
  (define s (quotient c 4))
  (define t (remainder c 4))
  (define p (quotient (+ 8 c) 25))
  (define q (quotient (- c (+ p 1)) 3))
  (define e (remainder (- (+ 15 (* 19 n ) c) s q) 30))
  (define b (quotient u 4))
  (define d (remainder u 4))
  (define l (remainder (- (+ 32 (* 2 t) (* 2 b) ) e d) 7))
  (define h (quotient (+ n (* 11 e) (* 22 l)) 451))
  (define m (quotient (- (+ e l 114) (* 7 h)) 31))
  (define j (remainder (- (+ e l 114) (* 7 h)) 31))
  (cond ((= m 3) (list (+ j 1) m annee))
        ((= m 4) (list (+ j 1) m annee))))

(define (dateCorrecte? jour mois annee)
  (and (jourCorrect? jour)
       (moisCorrect? mois)
       (let ((jours_dans_mois
              (cond ((member mois '(1 3 5 7 8 10 12)) 31)
                    ((member mois '(4 6 9 11)) 30)
                    ((and (= mois 2) (anneeBissextile? annee))
                     29)
                    (else 28))))
         (<= jour jours_dans_mois))))

(define (JourSemaine n)
  (define Jr (rem n))
  (display "Jr : ") (display Jr) (newline) 
  (cond
      ((= Jr 5) "Dimanche")
      ((= Jr 6) "Lundi")
      ((= Jr 0) "Mardi")
      ((= Jr 1) "Mercredi")
      ((= Jr 2) "Jeudi")
      ((= Jr 3) "Vendredi")
      ((= Jr 4) "Samedi")))

(define (JourAnnee)
  (display "tapez une date de la forme jj-mm-aaaa : ")
  (define date (symbol->string(read)))
  ; --
  (define components (string-split date "-"))
  (define jour (string->number (list-ref components 0)))
  (define mois (string->number (list-ref components 1)))
  (define annee (string->number (list-ref components 2)))
  (dateCorrecte? jour mois annee)
  ; --
  (define dif (- annee 2020))
  (display "dif : ") (display dif) (newline)
  (define difBis (quotient dif 4))
  (display "difBis : ") (display difBis) (newline)
  (define nbrJr (date2NbrJr jour mois annee))
  (display "nbrJr : ") (display nbrJr) (newline)
  (newline)
    (display "Le ")
    (display date)
    (display " est un ")
    (display (JourSemaine (+ nbrJr dif difBis)))
    (newline)
  ; Afficher la date de Pâques
  (define paques (datePaques annee))
  (display "La date de Pâques pour l'année ")
  (display annee)
  (display " est le ")
  (display (list-ref paques 0))
  (display "-")
  (display (list-ref paques 1))
  (newline))

(JourAnnee)
